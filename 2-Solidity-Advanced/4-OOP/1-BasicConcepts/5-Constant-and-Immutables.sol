/*
    ----------------------------------------
    Constant and Immutable State Variables
    ----------------------------------------
    State variables can be declared as "constant" or "immutable" 
    It is also possible to define constant variables at the "file level"
    
        - value of constant variables, has to be fixed at "compile-time"
        - value of immutable variables, can still be assigned at "construction time"

        - In both cases, the variables cannot be modified after the contract has been constructed.

    
    -------------
    storage slot
    -------------
    The compiler does not reserve a storage slot for these variables, 
    and every occurrence is replaced by the respective value.

    -------------
        Gas
    -------------
    Compared to regular state variables, 
    the gas costs of constant and immutable variables are much lower. 

    For a constant variable, the expression assigned to it is copied to all the places where it is accessed and also re-evaluated each time. 
        This allows for local optimizations. 

    Immutable variables are evaluated once at construction time 
    and their value is copied to all the places in the code where they are accessed. 
    For these values, "32 bytes" are reserved, even if they would fit in fewer bytes. 
    Due to this, 

        "constant values" can sometimes be "cheaper" than "immutable values"


    -----------------
    Supported types
    -----------------
    strings             : only for constants
    all value types     : for both



    -----------------
    Constant
    -----------------
    For constant variables, the value has to be a constant at compile time 
    and it has to be assigned where the variable is declared. 

        -----------
        allowed
        -----------
        These built-in functions are allowed (even though, with the exception of keccak256, they do call external contracts)
            - keccak256
            - sha256
            - ripemd160
            - ecrecover
            - addmod 
            - mulmod 

                
        Expressions that might have a 'side-effect' on "memory allocation" are allowed

            The reason behind allowing side-effects on the memory allocator is that 
            it should be possible to construct complex objects 
            like e.g. lookup-tables. 
            This feature is not yet fully usable.

        
        -----------
        not allowed
        -----------
        Expressions that might have a 'side-effect' on "other memory objects" are not allowed.

        Any expression that accesses storage, blockchain data or execution data or makes calls to external contracts is disallowed.
            e.g. 
                - block.timestamp
                - address(this).balance
                - block.number
                - msg.value
                - gasleft()

    
        
    -----------------
    Immutable
    -----------------
    Variables declared as immutable are a bit "less restricted" than those declared as constant

    Immutable variables can be assigned an 'arbitrary value'
        - in the "constructor" of the contract 
        - or at the point of their "declaration"
    
    They can be assigned 'only once' 
    and can be read even during construction time

    ------------------------------------
    [creation code] adn [runtime code]
    ------------------------------------
    The contract 'creation code' generated by the compiler 
        will modify the contractâ€™s 'runtime code' 
        before it is returned by replacing all references to immutables with the values assigned to them. 

    This is important if you are comparing the 'runtime code' generated by the compiler with the one 'actually stored in the blockchain'


    -----------------
    Note
    -----------------
    Immutables that are assigned at their declaration 
    are only considered initialized once the constructor of the contract is executing. 
    
    This means you cannot initialize immutables inline with a value that depends on another immutable. 
    You can do this, however, inside the constructor of the contract.

    This is a safeguard against different interpretations 
    about the order of state variable initialization and constructor execution, 
    especially with regards to inheritance.

*/